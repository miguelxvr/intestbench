#!/bin/bash

function _logger
{
        echo -ne "`date +%s`: $1\n" >> $output_log
}

function log_separator
{
        _logger "----------------------------------------------------------------\n"
}

function log
{
	_logger $1
}

function get_lastest_metric
{
	local bench_name=$1
	local metric=$(grep "$bench_name h1" $output_log | tail -1 | awk '{print $5}')
	echo $metric
}

function get_pnr
{
        local wmetric_al=$1
        local wmetric=$2
	local pnr=1

        if [ $wmetric_al"x" != "x" ]; then

                local pnr=$(echo "scale=2; $wmetric_al/$wmetric" | bc | awk '{printf "%.2f", $0}')
        fi
 
        echo $pnr
}

function get_workload_metric
{

	local workload_log=$(get_log_from_base_host)
        local workload_metric=$(echo $workload_log | awk '{print $5}')

	echo $workload_metric
}

function log_workload_alone_statistics
{
	local bench_name=$1
        local percent_h1=$2
        local percent_h2=$3
        local wmetric_al=$4

        _logger "$bench_name h1:$percent_h1% h2:$percent_h2% wmetric_al:$wmetric_al"
}

function log_bench_statistics
{
	local bench_name=$1
	local percent_h1=$2
	local percent_h2=$3
	local wmetric=$4
	local wmetric_al=$5

	if [ -z $output_log ]; then
		local wmetric_al_100=$(grep "$bench_name h1" $output_log | head -n1 | awk '{print $6}' | cut -d":" -f2)
	fi

	local pnr=$(get_pnr $wmetric_al $wmetric)

	if [ $wmetric_al_100"x" != "x" ]; then
		local pnr_100=$(get_pnr $wmetric_al_100 $wmetric)
		_logger "$bench_name h1:$percent_h1% h2:$percent_h2% wmetric:$wmetric wmetric_al:$wmetric_al pnr:$pnr pnr_wo/r:$pnr_100"
	else
		_logger "$bench_name h1:$percent_h1% h2:$percent_h2% wmetric:$wmetric wmetric_al:$wmetric_al pnr:$pnr"
	fi
}

function log_overall_statistics
{
	[ $restrict_res = "no" ] && return

        local bench_name=$1

#        local metric_mean=$(grep "$bench_name h1" $output_log | awk '{x+=$5;next}END{print x/((NR>0)?NR:1)}' | cut -d":" -f2)
#        _logger "$bench_name Performance Metric Average\t\t$metric_mean"

#	local pnr=$(get_pnr $metric_mean)
#        _logger "$bench_name Performance Noise Ratio (PNR) Metric Average\t$pnr"

        local pnr=$(grep "$bench_name h1" $output_log | head -n1 | awk '{print $7}' | cut -d":" -f2)
        _logger "$bench_name PNR Contention Metric \t\t\t$pnr"

#	local best_pnr=$(grep "$bench_name h1" $output_log | tail -n +2 | cut -d":" -f8  | awk 'BEGIN {x = 0} {if ($1>x) x=$1} END {print x}')
#        _logger "$bench_name PNR Contention Metric Best Case\t$best_pnr"

#	local worst_pnr=$(grep "$bench_name h1" $output_log | tail -n +2 | cut -d":" -f8 | awk 'BEGIN {x = 1} {if ($1<x) x=$1} END {print x}')
#        _logger "$bench_name PNR Contention Metric Worst Case\t$worst_pnr"

        local best_pnr=$(grep "$bench_name h1" $output_log | tail -n +2 | cut -d":" -f7 | awk 'BEGIN {x = 0} {if ($1>x) x=$1} END {print x}')
        _logger "$bench_name PNR Isolation Metric Best Case\t\t$best_pnr"

        local worst_pnr=$(grep "$bench_name h1" $output_log | tail -n +2 | cut -d":" -f7 | awk 'BEGIN {x = 1} {if ($1<x) x=$1} END {print x}')
        _logger "$bench_name PNR Isolation Metric Worst Case\t$worst_pnr"

        log_separator
}
